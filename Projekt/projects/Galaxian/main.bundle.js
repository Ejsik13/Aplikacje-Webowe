/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/Game.ts":
/*!************************!*\
  !*** ./src/ts/Game.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Player\": () => (/* binding */ Player)\n/* harmony export */ });\n//get canvas\r\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nvar canvasResults = document.getElementById(\"results\");\r\nvar canvasResultsStats = document.getElementById(\"resultsStats\");\r\nvar canvas = document.getElementById(\"game\");\r\n//get canvas context\r\nvar context = canvas.getContext(\"2d\");\r\nvar contextResultsStats = canvasResultsStats.getContext(\"2d\");\r\n//szerokośc canvas\r\ncanvas.width = 720;\r\ncanvasResults.width = 720;\r\ncanvasResultsStats.width = 720;\r\n//wysokość canvas\r\ncanvas.height = 720;\r\ncanvasResults.height = 55;\r\ncanvasResultsStats.height = 55;\r\nvar colorTab = [\r\n    \"#5f4c00\",\r\n    \"#705e00\",\r\n    \"#816f00\",\r\n    \"#938009\",\r\n    \"#a4921a\",\r\n    \"#b2a02b\",\r\n    \"#c7b43d\",\r\n    \"#d8c64e\",\r\n    \"#ead760\",\r\n    \"#f6e46f\",\r\n    \"#fffa84\",\r\n    \"#ffff99\",\r\n    \"#5d4b00\",\r\n    \"#6e5c00\",\r\n    \"#7f6d00\",\r\n    \"#907e09\",\r\n    \"#a18f1a\",\r\n    \"#b3a02b\",\r\n    \"#c3b13c\",\r\n    \"#d4c24d\",\r\n    \"#e5d35e\",\r\n    \"#f7e46f\",\r\n    \"#fff582\",\r\n    \"#ffff96\",\r\n    \"#753900\",\r\n    \"#864a00\",\r\n    \"#975b0a\",\r\n    \"#a86c1b\",\r\n    \"#b97d2c\",\r\n    \"#ca8e3d\",\r\n    \"#db9f4e\",\r\n    \"#ecb05f\",\r\n    \"#fdc170\",\r\n    \"#ffd285\",\r\n    \"#ffe39c\",\r\n    \"#fff4b2\",\r\n    \"#822a0d\",\r\n    \"#933b1e\",\r\n    \"#a44c2f\",\r\n    \"#b55d40\",\r\n    \"#c66e51\",\r\n    \"#d77f62\",\r\n    \"#e89073\",\r\n    \"#f9a183\",\r\n    \"#ffb298\",\r\n    \"#ffc3ae\",\r\n    \"#ffd4c4\",\r\n    \"#ffe5da\",\r\n    \"#83203c\",\r\n    \"#94314d\",\r\n    \"#a5425e\",\r\n    \"#b6536f\",\r\n    \"#c76480\",\r\n    \"#d87591\",\r\n    \"#e986a2\",\r\n    \"#fa97b3\",\r\n    \"#ffa8c8\",\r\n    \"#ffb9de\",\r\n    \"#ffcaef\",\r\n    \"#fbdcf6\",\r\n    \"#771d6d\",\r\n    \"#882e7e\",\r\n    \"#993f8f\",\r\n    \"#aa50a0\",\r\n    \"#bb61b1\",\r\n    \"#cc72c2\",\r\n    \"#dd83d3\",\r\n    \"#ee94e4\",\r\n    \"#ffa5e4\",\r\n    \"#ffb6e9\",\r\n    \"#ffc7ee\",\r\n    \"#ffd8f3\",\r\n    \"#622195\",\r\n    \"#7332a6\",\r\n    \"#8443b7\",\r\n    \"#9554c8\",\r\n    \"#a665d9\",\r\n    \"#b776ea\",\r\n    \"#c887eb\",\r\n    \"#d998eb\",\r\n    \"#e9a9ec\",\r\n    \"#fbbaeb\",\r\n    \"#ffcbef\",\r\n    \"#ffdff9\",\r\n    \"#462dae\",\r\n    \"#573ebf\",\r\n    \"#684fd0\",\r\n    \"#7960e1\",\r\n    \"#8a71f2\",\r\n    \"#9b82f7\",\r\n    \"#ac93f7\",\r\n    \"#bda4f7\",\r\n    \"#ceb5f7\",\r\n    \"#dfc6f7\",\r\n    \"#f0d7f7\",\r\n    \"#ffe8f8\",\r\n    \"#2a3db2\",\r\n    \"#3b4ec3\",\r\n    \"#4c5fd4\",\r\n    \"#5d70e5\",\r\n    \"#6e81f6\",\r\n    \"#7f92ff\",\r\n    \"#90a3ff\",\r\n    \"#a1b4ff\",\r\n    \"#b2c5ff\",\r\n    \"#c3d6ff\",\r\n    \"#d4e7ff\",\r\n    \"#e5f8ff\",\r\n    \"#134ea0\",\r\n    \"#245fb1\",\r\n    \"#3570c2\",\r\n    \"#4681d3\",\r\n    \"#5792e4\",\r\n    \"#68a3f5\",\r\n    \"#79b4ff\",\r\n    \"#8ac5ff\",\r\n    \"#9bd6ff\",\r\n    \"#ace7ff\",\r\n    \"#bdf8ff\",\r\n    \"#ceffff\",\r\n    \"#065e7c\",\r\n    \"#176f8d\",\r\n    \"#28809e\",\r\n    \"#3991af\",\r\n    \"#4aa2c0\",\r\n    \"#5bb3d1\",\r\n    \"#6cc4e2\",\r\n    \"#7dd5f3\",\r\n    \"#8ee6ff\",\r\n    \"#9ff7ff\",\r\n    \"#b0ffff\",\r\n    \"#c1ffff\",\r\n    \"#05684d\",\r\n    \"#16795e\",\r\n    \"#278a6f\",\r\n    \"#389b80\",\r\n    \"#49ac91\",\r\n    \"#5abda2\",\r\n    \"#6bceb3\",\r\n    \"#7cdfc4\",\r\n    \"#8df0d5\",\r\n    \"#9effe5\",\r\n    \"#affff1\",\r\n    \"#c0fffd\",\r\n    \"#106b1b\",\r\n    \"#217c2c\",\r\n    \"#328d3d\",\r\n    \"#439e4e\",\r\n    \"#54af5f\",\r\n    \"#65c070\",\r\n    \"#76d181\",\r\n    \"#87e292\",\r\n    \"#98f3a3\",\r\n    \"#a9ffb3\",\r\n    \"#baffbf\",\r\n    \"#cbffcb\",\r\n    \"#266713\",\r\n    \"#377813\",\r\n    \"#488914\",\r\n    \"#599a25\",\r\n    \"#6aab36\",\r\n    \"#7bbc47\",\r\n    \"#8ccd58\",\r\n    \"#9dde69\",\r\n    \"#aeef7a\",\r\n    \"#bfff8b\",\r\n    \"#d0ff97\",\r\n    \"#e1ffa3\",\r\n    \"#415b08\",\r\n    \"#526c08\",\r\n    \"#637d08\",\r\n    \"#748e0d\",\r\n    \"#859f1e\",\r\n    \"#96b02f\",\r\n    \"#a7c140\",\r\n    \"#b8d251\",\r\n    \"#c9e362\",\r\n    \"#daf473\",\r\n    \"#ebff82\",\r\n    \"#fcff8e\",\r\n];\r\nvar arrayInvaders = [\r\n    [0, 0, 0, 4, 0, 4, 4, 0, 0, 0],\r\n    [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],\r\n    [0, 2, 2, 2, 2, 2, 2, 2, 2, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n];\r\nvar defaultArrayInvaders = [\r\n    [0, 0, 0, 4, 0, 4, 4, 0, 0, 0],\r\n    [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],\r\n    [0, 2, 2, 2, 2, 2, 2, 2, 2, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n];\r\nvar removedInvaders = [];\r\n// export class Game {\r\n//   canvas: HTMLCanvasElement;\r\n//   context: CanvasRenderingContext2D;\r\n//   constructor() {\r\n//     this.start();\r\n//   }\r\n//   start() {\r\n//     // let canvas = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\n//     console.log(canvas);\r\n//     // let context = canvas.getContext(\"2d\");\r\n//   }\r\n// }\r\nvar playerMode = \"player1\";\r\nvar statusInterval;\r\n//wyniki na dole\r\nvar ResultsStats = /** @class */ (function () {\r\n    function ResultsStats() {\r\n        this.position = { x: 200, y: 200 };\r\n        // velocity: Position = { x: 0, y: 0 };\r\n        this.width = 100;\r\n        this.height = 100;\r\n        this.widthFlag = 100;\r\n        this.heightFlag = 100;\r\n        this.gameStatus = \"\";\r\n        this.bestResult = 0;\r\n        this.resultsGame = 0;\r\n        this.modeText = \"\";\r\n        this.modeText2 = \"\";\r\n        // //źródło obrazka statku i jego docelowa wielkość i pozycja\r\n        // this.image.src = \"./src/img/spaceship.png\";\r\n        // this.height = this.image.height * 0.6;\r\n        // this.width = this.image.width * 0.6;\r\n        // this.position.x = canvas.width / 2 - this.width / 2;\r\n        // this.position.y = canvas.height - this.height - 30;\r\n    }\r\n    //rysowanie w canvas\r\n    ResultsStats.prototype.draw = function (mode, bestResult, resultsGame) {\r\n        // context.fillStyle = 'red'\r\n        // context.fillRect(this.position.x, this.position.y, this.width, this.height)\r\n        //console.log(newPoints)\r\n        if (mode === \"start\") {\r\n            this.modeText = \"  00 COPYRIGHT 1982 ATARI,INC.\";\r\n            this.modeText2 = \"\";\r\n        }\r\n        if (mode === \"player1\") {\r\n            //console.log(\"player1\");\r\n            this.modeText = this.bestResult.toString();\r\n            this.modeText2 = this.resultsGame.toString();\r\n            if (this.bestResult === 0) {\r\n                //console.log(\"eeeeeeeeeeee\")\r\n                this.modeText = this.bestResult.toString();\r\n            }\r\n            if (bestResult > this.bestResult) {\r\n                this.bestResult = bestResult;\r\n                this.modeText = this.bestResult.toString();\r\n            }\r\n            if (resultsGame > this.resultsGame && resultsGame !== -1) {\r\n                this.resultsGame = resultsGame;\r\n                this.modeText2 = this.resultsGame.toString();\r\n            }\r\n            if (resultsGame === -1) {\r\n                this.resultsGame = 0;\r\n                this.modeText2 = this.resultsGame.toString();\r\n            }\r\n        }\r\n        if (mode === \"player2\") {\r\n            //console.log(\"player2\");\r\n            if (player.player === 1) {\r\n                this.modeText = \"00  PLAYER 1 UP   PLAYER 2\";\r\n                this.resultsGame = resultsGame;\r\n                this.modeText2 = this.resultsGame.toString();\r\n            }\r\n            if (player.player === 2) {\r\n                this.modeText = \"00  PLAYER 2 UP   PLAYER 1\";\r\n                this.resultsGame = resultsGame;\r\n                this.modeText2 = this.resultsGame.toString();\r\n            }\r\n        }\r\n        // console.log(resultsGame != 0)\r\n        //console.log(this.resultsGame)\r\n        //this.points += newPoints;\r\n        //gameover\r\n        // contextResultsStats.font = \"50px retroFont\";\r\n        // contextResultsStats.fillStyle = colorTab[Math.floor(Math.random() * 179)];\r\n        // contextResultsStats.textAlign = \"center\";\r\n        // contextResultsStats.fillText(\r\n        //   this.gameStatus,\r\n        //   canvas.width / 2,\r\n        //   canvas.height / 2\r\n        // );\r\n        //rysowanie statku w danej pozycji\r\n        contextResultsStats.font = \"20px retroFont\";\r\n        contextResultsStats.fillStyle = \"#837E85\";\r\n        contextResultsStats.textAlign = \"left\";\r\n        contextResultsStats.fillText(this.modeText, canvasResultsStats.width / 2 - 330, canvasResultsStats.height / 2 + 10);\r\n        contextResultsStats.font = \"20px retroFont\";\r\n        contextResultsStats.fillStyle = \"#837E85\";\r\n        contextResultsStats.textAlign = \"right\";\r\n        contextResultsStats.fillText(this.modeText2, canvasResultsStats.width / 2 + 330, canvasResultsStats.height / 2 + 10);\r\n    };\r\n    //zmiana pozycji statku\r\n    ResultsStats.prototype.update = function () {\r\n        this.draw(\"game\", 0, 0);\r\n        //console.log(this.velocity.x)\r\n        //console.log(this.position.x)\r\n        // this.position.x += this.velocity.x;\r\n    };\r\n    return ResultsStats;\r\n}());\r\n//wyniki\r\nvar Results = /** @class */ (function () {\r\n    function Results() {\r\n        this.position = { x: 200, y: 200 };\r\n        this.positionFlag = { x: 200, y: 200 };\r\n        // velocity: Position = { x: 0, y: 0 };\r\n        this.points = 0;\r\n        this.points2 = 0;\r\n        this.pointsView = 0;\r\n        this.life = 2;\r\n        this.life2 = 3;\r\n        this.level = 1;\r\n        this.level2 = 1;\r\n        this.levelShow = 1;\r\n        this.image = new Image();\r\n        this.imageFlag = new Image();\r\n        this.width = 100;\r\n        this.height = 100;\r\n        this.widthFlag = 100;\r\n        this.heightFlag = 100;\r\n        this.gameStatus = \"\";\r\n        this.coutertext = 0;\r\n        this.restart = \"game\";\r\n        this.mode = \"ONE PLAYER\";\r\n        // //źródło obrazka statku i jego docelowa wielkość i pozycja\r\n        // this.image.src = \"./src/img/spaceship.png\";\r\n        // this.height = this.image.height * 0.6;\r\n        // this.width = this.image.width * 0.6;\r\n        // this.position.x = canvas.width / 2 - this.width / 2;\r\n        // this.position.y = canvas.height - this.height - 30;\r\n    }\r\n    //rysowanie w canvas\r\n    Results.prototype.draw = function (newPoints, life, level, status) {\r\n        //console.warn(level)\r\n        // context.fillStyle = 'red'\r\n        // context.fillRect(this.position.x, this.position.y, this.width, this.height)\r\n        //console.log(newPoints)\r\n        //console.log(status);\r\n        var _this = this;\r\n        if (status === \"selectMode\") {\r\n            this.gameStatus = \"SELECT GAME\";\r\n        }\r\n        if (status === \"player1\") {\r\n            this.mode = \"ONE PLAYER\";\r\n            this.gameStatus = \"ONE PLAYER\";\r\n        }\r\n        if (status === \"player2\") {\r\n            this.mode = \"TWO PLAYER\";\r\n            this.gameStatus = \"TWO PLAYER\";\r\n        }\r\n        if (newPoints !== -1) {\r\n            //console.log(\"tak\")\r\n            if (player.lifeNow === true && player.playGame === true) {\r\n                this.points += newPoints;\r\n                this.pointsView = this.points;\r\n            }\r\n            if (player.lifeNow2 === true && player.playGame === true) {\r\n                this.points2 += newPoints;\r\n                this.pointsView = this.points2;\r\n            }\r\n        }\r\n        if (player.playGame === false) {\r\n            //console.log(fly)\r\n            // let fly = grids[0].invaders.find((element) => {\r\n            //   if (element.selectedToAttack) {\r\n            //     //console.log(element)\r\n            //     return element;\r\n            //   }\r\n            // const findReady = setTimeout(()=>{\r\n            //   if (player.lifeNow === false &&\r\n            //     player.lifeNow2 === false &&\r\n            //     player.backgroundStart === false){\r\n            //       //flyInvader()\r\n            //     console.log(\"przerwa\")\r\n            //   } else{\r\n            //     clearInterval(findReady)\r\n            //     flyInvader()\r\n            //   }\r\n            // },1)\r\n            // });\r\n            // console.log(fly);\r\n            if (fly === undefined) {\r\n                player.backgroundStart = true;\r\n            }\r\n        }\r\n        if (player.playGame === true) {\r\n            //console.log(this.mode);\r\n            if (this.mode === \"ONE PLAYER\") {\r\n                // console.log(this.mode);\r\n                // console.log(player.player);\r\n                if (life !== -1) {\r\n                    //console.log(\"tak\")\r\n                    if (this.life > 0) {\r\n                        this.life -= life;\r\n                        this.gameStatus = \"PLAYER 1\";\r\n                        resultsStats.draw(\"player1\", 0, this.points);\r\n                        //dźwięk\r\n                        // let audio = new Audio(\"./../mp3/start.mp3\");\r\n                        //audio.play();\r\n                        setTimeout(function () {\r\n                            _this.gameStatus = \"\";\r\n                            if (fly === undefined) {\r\n                                player.lifeNow = true;\r\n                            }\r\n                            flyInvader();\r\n                            _this.pointsView = _this.points;\r\n                        }, 1000);\r\n                        this.coutertext = 0;\r\n                    }\r\n                    else {\r\n                        if (this.coutertext === 0) {\r\n                            this.coutertext += 1;\r\n                            player.backgroundStart = true;\r\n                            player.lifeNow = false;\r\n                            player.playGame = false;\r\n                            clearInterval(intervalMusicGrid);\r\n                            this.gameStatus = \"GAME OVER\";\r\n                            resultsStats.draw(\"player1\", this.points, -1);\r\n                            //console.log(this.coutertext);\r\n                            statusInterval = setInterval(function () {\r\n                                if (status !== \"restart\") {\r\n                                    switch (_this.gameStatus) {\r\n                                        case \"GALAXIAN\":\r\n                                            _this.gameStatus = \"GAME OVER\";\r\n                                            break;\r\n                                        case \"GAME OVER\":\r\n                                            _this.gameStatus = \"GALAXIAN\";\r\n                                            break;\r\n                                    }\r\n                                }\r\n                                // console.log(statusInterval)\r\n                            }, 5000);\r\n                        }\r\n                    }\r\n                }\r\n                // if (level !== -1) {\r\n                //   //console.log(\"tak\")\r\n                //   //this.level += level;\r\n                //   this.levelShow = this.level;\r\n                // }\r\n            }\r\n            if (this.mode === \"TWO PLAYER\") {\r\n                //console.log(player.player);\r\n                if (player.player === 1) {\r\n                    // console.log(this.life);\r\n                    if (life !== -1) {\r\n                        //console.log(\"tak\")\r\n                        if (this.life > 0) {\r\n                            this.life -= life;\r\n                            this.gameStatus = \"PLAYER 1\";\r\n                            resultsStats.draw(\"player2\", 0, this.points2);\r\n                            setTimeout(function () {\r\n                                _this.gameStatus = \"\";\r\n                                if (fly === undefined) {\r\n                                    player.lifeNow = true;\r\n                                }\r\n                                flyInvader();\r\n                                _this.pointsView = _this.points;\r\n                                gridsP1 = __spreadArray([], grids, true);\r\n                                grids = [];\r\n                                removedInvaders = [];\r\n                                projectiles = [];\r\n                                invaderProjectiles = [];\r\n                                for (var i = 0; i < arrayInvaders.length; i++) {\r\n                                    for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                        // console.log(removedInvaders)\r\n                                        // console.log(removedInvaders[i][1])\r\n                                        defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                                    }\r\n                                }\r\n                                //console.log(arrayInvaders);\r\n                                grids = __spreadArray([], gridsP2, true);\r\n                                player.position.x = canvas.width / 2 - player.width / 2;\r\n                                projectiles.push(new Projectile({\r\n                                    x: player.position.x + player.width / 2,\r\n                                    y: player.position.y - 5,\r\n                                }, { x: 0, y: 0 }));\r\n                                //resultsStats.draw(mode, 0, 0);\r\n                                cancelAnimationFrame(myReq);\r\n                                animate();\r\n                            }, 1000);\r\n                            this.coutertext = 0;\r\n                        }\r\n                    }\r\n                    // if (level !== -1) {\r\n                    //   //console.log(\"tak\")\r\n                    //   this.level += level;\r\n                    //   this.levelShow = this.level\r\n                    // }\r\n                }\r\n                if (player.player === 2) {\r\n                    //console.log(this.life2);\r\n                    // console.warn(this.life2);\r\n                    //console.warn(\"lajfy\");\r\n                    //console.warn(this.life);\r\n                    if (life !== -1) {\r\n                        //console.log(\"tak\")\r\n                        if (this.life2 > 0) {\r\n                            // console.warn(this.life2);\r\n                            this.life2 -= life;\r\n                            this.gameStatus = \"PLAYER 2\";\r\n                            resultsStats.draw(\"player2\", 0, this.points);\r\n                            setTimeout(function () {\r\n                                _this.gameStatus = \"\";\r\n                                if (fly === undefined) {\r\n                                    player.lifeNow2 = true;\r\n                                }\r\n                                flyInvader();\r\n                                _this.pointsView = _this.points2;\r\n                                gridsP2 = __spreadArray([], grids, true);\r\n                                grids = [];\r\n                                removedInvaders = [];\r\n                                projectiles = [];\r\n                                invaderProjectiles = [];\r\n                                for (var i = 0; i < arrayInvaders.length; i++) {\r\n                                    for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                        // console.log(removedInvaders)\r\n                                        // console.log(removedInvaders[i][1])\r\n                                        defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                                    }\r\n                                }\r\n                                //console.log(arrayInvaders);\r\n                                grids = __spreadArray([], gridsP1, true);\r\n                                player.position.x = canvas.width / 2 - player.width / 2;\r\n                                projectiles.push(new Projectile({\r\n                                    x: player.position.x + player.width / 2,\r\n                                    y: player.position.y - 5,\r\n                                }, { x: 0, y: 0 }));\r\n                                //resultsStats.draw(mode, 0, 0);\r\n                                if (_this.life === 0) {\r\n                                    //console.warn(this.life2);\r\n                                    _this.life2 = 0;\r\n                                }\r\n                                cancelAnimationFrame(myReq);\r\n                                animate();\r\n                            }, 1000);\r\n                            this.coutertext = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.coutertext === 0) {\r\n                        // console.warn(\"GAMEOVER\");\r\n                        // console.warn(this.level);\r\n                        // console.warn(this.level2);\r\n                        // console.warn(this.levelShow);\r\n                        if (this.life === 0 && this.life2 === 0) {\r\n                            this.coutertext += 1;\r\n                            player.backgroundStart = true;\r\n                            player.lifeNow2 = false;\r\n                            player.playGame = false;\r\n                            this.gameStatus = \"GAME OVER\";\r\n                            clearInterval(intervalMusicGrid);\r\n                            resultsStats.draw(\"player1\", this.points2, -1);\r\n                            //console.log(this.coutertext);\r\n                            statusInterval = setInterval(function () {\r\n                                if (status !== \"restart\") {\r\n                                    switch (_this.gameStatus) {\r\n                                        case \"GALAXIAN\":\r\n                                            _this.gameStatus = \"GAME OVER\";\r\n                                            break;\r\n                                        case \"GAME OVER\":\r\n                                            _this.gameStatus = \"GALAXIAN\";\r\n                                            break;\r\n                                    }\r\n                                }\r\n                            }, 5000);\r\n                        }\r\n                    }\r\n                    // if (level !== -1) {\r\n                    //   //console.log(\"tak\")\r\n                    //   this.level2 += level;\r\n                    //   this.levelShow = this.level2\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n        if (status === \"restart\") {\r\n            player.player = 1;\r\n            this.points = 0;\r\n            this.points2 = 0;\r\n            this.pointsView = 0;\r\n            this.life = 2;\r\n            this.life2 = 3;\r\n            this.level = 1;\r\n            this.level2 = 1;\r\n            this.levelShow = 1;\r\n            this.levelShow = 1;\r\n            resultsStats.draw(\"start\", 0, -1);\r\n            this.gameStatus = \"GALAXIAN\";\r\n            //console.log(statusInterval);\r\n            clearInterval(statusInterval);\r\n            clearInterval(intervalMusicGrid);\r\n        }\r\n        if (status === \"start\") {\r\n            clearInterval(statusInterval);\r\n            player.player = 1;\r\n            this.points = 0;\r\n            this.points2 = 0;\r\n            this.pointsView = 0;\r\n            this.life = 2;\r\n            this.life2 = 3;\r\n            this.level = 1;\r\n            this.level2 = 1;\r\n            this.levelShow = 1;\r\n            this.levelShow = 1;\r\n            resultsStats.draw(mode, 0, -1);\r\n            this.gameStatus = this.mode;\r\n            setTimeout(function () {\r\n                _this.gameStatus = \"\";\r\n            }, 1000);\r\n        }\r\n        //this.points += newPoints;\r\n        //gameover\r\n        context.font = \"50px retroFont\";\r\n        context.fillStyle = colorTab[Math.floor(Math.random() * 179)];\r\n        context.textAlign = \"center\";\r\n        context.fillText(this.gameStatus, canvas.width / 2, canvas.height / 2);\r\n        //rysowanie statku w danej pozycji\r\n        context.font = \"30px retroFont\";\r\n        context.fillStyle = \"#6A7CF4\";\r\n        context.textAlign = \"left\";\r\n        context.fillText(\"0\", canvasResults.width / 2 - 330, canvasResults.height / 2 + 10);\r\n        context.font = \"30px retroFont\";\r\n        context.fillStyle = \"#A7B327\";\r\n        context.textAlign = \"right\";\r\n        context.fillText(this.pointsView.toString(), canvasResults.width / 2 - 80, canvasResults.height / 2 + 10);\r\n        for (var i = 0; i < this.life; i++) {\r\n            this.image.src = \"./src/img/life.png\";\r\n            this.height = this.image.height * 0.6;\r\n            this.width = this.image.width * 0.6;\r\n            this.position.x = canvasResults.width / 2 + this.width * i * 1.2 - 40;\r\n            this.position.y = canvasResults.height / 3;\r\n            //console.log(\"wchodzi\");\r\n            context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height);\r\n        }\r\n        switch (player.player) {\r\n            case 1:\r\n                if (level !== -1) {\r\n                    //console.log(\"tak\")\r\n                    this.level += level;\r\n                }\r\n                setTimeout(function () {\r\n                    _this.levelShow = _this.level;\r\n                }, 2000);\r\n                // this.levelShow = this.level\r\n                break;\r\n            case 2:\r\n                if (level !== -1) {\r\n                    //console.log(\"tak\")\r\n                    this.level2 += level;\r\n                }\r\n                setTimeout(function () {\r\n                    _this.levelShow = _this.level2;\r\n                }, 2000);\r\n                //this.levelShow = this.level2\r\n                break;\r\n        }\r\n        // console.log(this.level);\r\n        for (var i = 0; i < this.levelShow; i++) {\r\n            this.imageFlag.src = \"./src/img/flag.png\";\r\n            this.heightFlag = this.imageFlag.height * 0.6;\r\n            this.widthFlag = this.imageFlag.width * 0.6;\r\n            this.positionFlag.x = canvasResults.width - this.widthFlag * i * 1.2 - 40;\r\n            this.positionFlag.y = canvasResults.height / 3;\r\n            //console.log(\"wchodzi\");\r\n            context.drawImage(this.imageFlag, this.positionFlag.x, this.positionFlag.y, this.widthFlag, this.heightFlag);\r\n        }\r\n    };\r\n    //zmiana pozycji statku\r\n    Results.prototype.update = function () {\r\n        this.draw(0, -1, -1, \"game\");\r\n        //console.log(this.velocity.x)\r\n        //console.log(this.position.x)\r\n        // this.position.x += this.velocity.x;\r\n    };\r\n    return Results;\r\n}());\r\n//statek\r\nvar Player = /** @class */ (function () {\r\n    function Player() {\r\n        this.position = { x: 200, y: 200 };\r\n        this.velocity = { x: 0, y: 0 };\r\n        this.width = 100;\r\n        this.height = 100;\r\n        this.image = new Image();\r\n        this.rotation = 0;\r\n        this.idNumber = 10;\r\n        this.opacity = 1;\r\n        this.lifeNow = true;\r\n        this.lifeNow2 = false;\r\n        this.backgroundStart = true;\r\n        this.playGame = false;\r\n        this.clearTitle = false;\r\n        this.player = 1;\r\n        //źródło obrazka statku i jego docelowa wielkość i pozycja\r\n        this.image.src = \"./src/img/spaceship.png\";\r\n        this.height = this.image.height * 0.6;\r\n        this.width = this.image.width * 0.6;\r\n        this.position.x = canvas.width / 2 - this.width / 2;\r\n        this.position.y = canvas.height - this.height - 60;\r\n    }\r\n    //rysowanie w canvas\r\n    Player.prototype.draw = function () {\r\n        // context.fillStyle = 'red'\r\n        // context.fillRect(this.position.x, this.position.y, this.width, this.height)\r\n        //rysowanie statku w danej pozycji\r\n        //this.image.onload = ()=>{\r\n        // this.image.onload\r\n        context.save();\r\n        context.globalAlpha = this.opacity;\r\n        context.beginPath();\r\n        context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height);\r\n        context.closePath();\r\n        context.restore();\r\n        //}\r\n    };\r\n    //zmiana pozycji statku\r\n    Player.prototype.update = function () {\r\n        this.draw();\r\n        //console.log(this.velocity.x)\r\n        //console.log(this.position.x)\r\n        this.position.x += this.velocity.x;\r\n    };\r\n    return Player;\r\n}());\r\n\r\n//strzał\r\nvar Projectile = /** @class */ (function () {\r\n    function Projectile(position, velocity) {\r\n        this.position = { x: 0, y: 0 };\r\n        this.velocity = { x: 0, y: 0 };\r\n        this.radius = 3;\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n    }\r\n    Projectile.prototype.draw = function () {\r\n        context.beginPath();\r\n        context.rect(this.position.x - 2.5, this.position.y, 5, 7);\r\n        context.rect(this.position.x - 2.5, this.position.y - 5, 5, 7);\r\n        context.rect(this.position.x - 2.5, this.position.y - 10, 5, 7);\r\n        //console.log(Math.random()*179)\r\n        // console.log(colorTab[Math.floor(Math.random()*179)])\r\n        context.fillStyle = colorTab[Math.floor(Math.random() * 179)];\r\n        context.fill();\r\n        context.closePath();\r\n    };\r\n    Projectile.prototype.update = function () {\r\n        this.draw();\r\n        this.position.x += this.velocity.x;\r\n        this.position.y += this.velocity.y;\r\n    };\r\n    return Projectile;\r\n}());\r\n//strzał invadera\r\nvar InvaderProjectile = /** @class */ (function () {\r\n    function InvaderProjectile(position, velocity) {\r\n        this.position = { x: 0, y: 0 };\r\n        this.velocity = { x: 0, y: 0 };\r\n        this.radius = 3;\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n        //console.log(\"idzie\");\r\n    }\r\n    InvaderProjectile.prototype.draw = function () {\r\n        context.beginPath();\r\n        context.rect(this.position.x - 2.5, this.position.y, 5, 7);\r\n        context.rect(this.position.x - 2.5, this.position.y - 5, 5, 7);\r\n        context.rect(this.position.x - 2.5, this.position.y - 10, 5, 7);\r\n        //console.log(Math.random()*179)\r\n        // console.log(colorTab[Math.floor(Math.random()*179)])\r\n        context.fillStyle = colorTab[Math.floor(Math.random() * 179)];\r\n        context.fill();\r\n        context.closePath();\r\n    };\r\n    InvaderProjectile.prototype.update = function () {\r\n        this.draw();\r\n        this.position.x += this.velocity.x;\r\n        this.position.y += this.velocity.y;\r\n    };\r\n    return InvaderProjectile;\r\n}());\r\n//wybuchy\r\nvar Particle = /** @class */ (function () {\r\n    function Particle(position, velocity, radius, color, fades, opacityCounter, idInvader) {\r\n        this.position = { x: 0, y: 0 };\r\n        this.position200 = { x: 0, y: 0 };\r\n        this.velocity = { x: 0, y: 0 };\r\n        this.radius = 3;\r\n        this.color = \"red\";\r\n        this.opacity = 1;\r\n        this.fades = false;\r\n        this.opacityCounter = 0;\r\n        this.idInvader = 0;\r\n        this.position = position;\r\n        this.position200 = position;\r\n        this.velocity = velocity;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.fades = fades;\r\n        this.opacityCounter = opacityCounter;\r\n        this.idInvader = idInvader;\r\n    }\r\n    Particle.prototype.draw = function () {\r\n        if (this.idInvader !== 44) {\r\n            context.save();\r\n            context.globalAlpha = this.opacity;\r\n            context.beginPath();\r\n            context.rect(this.position.x, this.position.y, 5, 5);\r\n            context.fillStyle = this.color;\r\n            context.fill();\r\n            context.closePath();\r\n            context.restore();\r\n        }\r\n        if (this.idInvader === 44) {\r\n            context.save();\r\n            context.globalAlpha = this.opacity;\r\n            context.beginPath();\r\n            context.font = \"10px retroFont\";\r\n            context.fillStyle = this.color;\r\n            context.textAlign = \"right\";\r\n            context.fillText(\"200\", this.position200.x, this.position200.y);\r\n            context.closePath();\r\n            context.restore();\r\n        }\r\n    };\r\n    Particle.prototype.update = function () {\r\n        this.draw();\r\n        this.position.x += this.velocity.x;\r\n        this.position.y += this.velocity.y;\r\n        if (this.fades) {\r\n            this.opacity -= this.opacityCounter;\r\n        }\r\n    };\r\n    return Particle;\r\n}());\r\n//invader\r\nvar Invader = /** @class */ (function () {\r\n    function Invader(position, i, j, idNumber, modelPosition) {\r\n        this.position = { x: 200, y: 200 };\r\n        this.velocity = { x: 0, y: 0 };\r\n        this.positionGrid = { x: 200, y: 200 };\r\n        this.positionDefault = { x: 200, y: 200 };\r\n        this.velocityGrid = { x: 0, y: 0 };\r\n        this.width = 100;\r\n        this.height = 100;\r\n        this.image = new Image();\r\n        this.rotation = 0;\r\n        this.idText = \"\";\r\n        this.mainIDNumber = 0;\r\n        this.idNumber = 0;\r\n        this.mover = 0;\r\n        this.modelPosition = true;\r\n        this.selectedToAttack = false;\r\n        this.coss = 0;\r\n        //źródło obrazka statku i jego docelowa wielkość i pozycja\r\n        if (idNumber === 1) {\r\n            this.idText = i + \"_\" + j;\r\n            this.idNumber = idNumber;\r\n            this.mainIDNumber = idNumber;\r\n            if (modelPosition) {\r\n                this.image.src = \"./src/img/invader_one_stay_down.png\";\r\n            }\r\n            else {\r\n                this.image.src = \"./src/img/invader_one_stay_up.png\";\r\n            }\r\n        }\r\n        else if (idNumber === 2) {\r\n            this.idText = i + \"_\" + j;\r\n            this.idNumber = idNumber;\r\n            this.mainIDNumber = idNumber;\r\n            if (modelPosition) {\r\n                this.image.src = \"./src/img/invader_two_stay_down.png\";\r\n            }\r\n            else {\r\n                this.image.src = \"./src/img/invader_two_stay_up.png\";\r\n            }\r\n            //   console.log(this.id)\r\n        }\r\n        else if (idNumber === 3) {\r\n            this.idText = i + \"_\" + j;\r\n            this.idNumber = idNumber;\r\n            this.mainIDNumber = idNumber;\r\n            if (modelPosition) {\r\n                this.image.src = \"./src/img/invader_three_stay_down.png\";\r\n            }\r\n            else {\r\n                this.image.src = \"./src/img/invader_three_stay_up.png\";\r\n            }\r\n        }\r\n        else if (idNumber === 4) {\r\n            this.idText = i + \"_\" + j;\r\n            this.idNumber = idNumber;\r\n            this.mainIDNumber = idNumber;\r\n            if (modelPosition) {\r\n                this.image.src = \"./src/img/invader_four_stay_down.png\";\r\n            }\r\n            else {\r\n                this.image.src = \"./src/img/invader_four_stay_up.png\";\r\n            }\r\n        }\r\n        else if (idNumber === 0) {\r\n            this.idText = i + \"_\" + j;\r\n            this.idNumber = idNumber;\r\n            this.mainIDNumber = idNumber;\r\n        }\r\n        this.height = this.image.height * 0.6;\r\n        this.width = this.image.width * 0.6;\r\n        this.position.x = position.x;\r\n        this.position.y = position.y;\r\n        this.positionGrid.x = position.x;\r\n        this.positionDefault.x = position.x;\r\n        this.positionDefault.y = position.y;\r\n        this.positionGrid.y = position.y;\r\n        this.modelPosition = modelPosition;\r\n    }\r\n    //rysowanie w canvas\r\n    Invader.prototype.draw = function () {\r\n        // context.fillStyle = \"red\";\r\n        // context.fillRect(this.position.x, this.position.y, this.width, this.height);\r\n        //rysowanie statku w danej pozycji\r\n        context.drawImage(this.image, Math.floor(this.position.x), this.position.y, this.width, this.height);\r\n        //console.log(Math.floor(this.position.x));\r\n    };\r\n    //zmiana pozycji invadera\r\n    Invader.prototype.update = function (velocity, modelPosition, selectedToAttack) {\r\n        // if (this.position.y >=0 && this.position.y <= this.positionGrid.y){\r\n        //   console.log(\"tu będzie pozycja X i Y grid\")\r\n        // }else if (this.position.y > this.positionGrid.y &&this.position.y < canvas.height){\r\n        //   console.log(\"tu będzie pozycja X i Y flying\")\r\n        // } else if (this.position.y === canvas.height) {\r\n        //   this.position.y = 0;\r\n        // }\r\n        //console.log(velocity);\r\n        this.draw();\r\n        if (velocity.x === -1 && velocity.y === -1) {\r\n            this.position.x = 1000;\r\n            this.position.y = 1000;\r\n        }\r\n        else if (velocity.y !== 0) {\r\n            //ZMIANA ID DO OBRAZKÓW\r\n            if (this.position.y > this.positionDefault.y &&\r\n                this.position.y <= this.positionDefault.y + 5) {\r\n                if (this.position.x >= player.position.x) {\r\n                    //  console.log(this.position.y)\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_left.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_left.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_left.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_left.png\";\r\n                    }\r\n                }\r\n                if (this.position.x < player.position.x) {\r\n                    // console.log(\"lewa\")\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_right.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_right.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_right.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_right.png\";\r\n                    }\r\n                }\r\n            }\r\n            if (this.position.y > this.positionDefault.y + 5 &&\r\n                this.position.y <= 230) {\r\n                if (this.position.x >= player.position.x) {\r\n                    //  console.log(this.position.y)\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_left_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_left_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_left_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_left_top.png\";\r\n                    }\r\n                }\r\n                if (this.position.x < player.position.x) {\r\n                    // console.log(\"lewa\")\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_right_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_right_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_right_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_right_top.png\";\r\n                    }\r\n                }\r\n            }\r\n            if (this.position.y > 230 && this.position.y < player.position.y) {\r\n                if (this.position.x > player.position.x + 40) {\r\n                    //  console.log(this.position.y)\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_right_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_right_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_right_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_right_top.png\";\r\n                    }\r\n                }\r\n                if (this.position.x < player.position.x - 40) {\r\n                    // console.log(\"lewa\")\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_left_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_left_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_left_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_left_top.png\";\r\n                    }\r\n                }\r\n                if (this.position.x <= player.position.x + 40 &&\r\n                    this.position.x >= player.position.x - 40) {\r\n                    // console.log(\"lewa\")\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_top.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_top.png\";\r\n                    }\r\n                }\r\n            }\r\n            if (this.position.y > this.positionDefault.y &&\r\n                this.position.y >= player.position.y) {\r\n                if (this.position.x > player.position.x) {\r\n                    // console.log(\"prawa\")\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_right.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_right.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_right.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_right.png\";\r\n                    }\r\n                }\r\n                if (this.position.x < player.position.x) {\r\n                    // console.log(\"lewa\")\r\n                    //prawa start->player\r\n                    if (this.mainIDNumber === 1) {\r\n                        this.idNumber = 11;\r\n                        this.image.src = \"./src/img/invader_one_left.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 2) {\r\n                        this.idNumber = 22;\r\n                        this.image.src = \"./src/img/invader_two_left.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 3) {\r\n                        this.idNumber = 33;\r\n                        this.image.src = \"./src/img/invader_three_left.png\";\r\n                    }\r\n                    if (this.mainIDNumber === 4) {\r\n                        this.idNumber = 44;\r\n                        this.image.src = \"./src/img/invader_four_left.png\";\r\n                    }\r\n                }\r\n            }\r\n            if (this.position.y >= 0 && this.position.y < this.positionDefault.y) {\r\n                // console.log(\"lewa\")\r\n                //prawa start->player\r\n                if (this.mainIDNumber === 1) {\r\n                    this.idNumber = 11;\r\n                    this.image.src = \"./src/img/invader_one_land.png\";\r\n                }\r\n                if (this.mainIDNumber === 2) {\r\n                    this.idNumber = 22;\r\n                    this.image.src = \"./src/img/invader_two_land.png\";\r\n                }\r\n                if (this.mainIDNumber === 3) {\r\n                    this.idNumber = 33;\r\n                    this.image.src = \"./src/img/invader_three_land.png\";\r\n                }\r\n                if (this.mainIDNumber === 4) {\r\n                    this.idNumber = 44;\r\n                    this.image.src = \"./src/img/invader_four_land.png\";\r\n                }\r\n            }\r\n            if (this.position.y < canvas.height &&\r\n                this.position.y >= this.positionGrid.y) {\r\n                // console.log(\"leci\")\r\n                if (this.positionDefault.y > 150) {\r\n                    this.coss = (this.coss + Math.PI / 180) % (Math.PI * 2);\r\n                }\r\n                else {\r\n                    this.coss = (this.coss + Math.PI / 270) % (Math.PI * 2);\r\n                }\r\n                //console.log(this.coss)\r\n                // //console.log(this.positionDefault)\r\n                // console.warn(this.positionDefault.y)\r\n                // console.warn((230+this.height))\r\n                // console.warn(((230+this.height)-this.positionDefault.y))\r\n                // console.warn((230-this.positionDefault.y)/2)\r\n                // console.warn(230-this.positionDefault.y/2 - (230-this.positionDefault.y)/2 *Math.cos(this.coss))\r\n                // let centerX = this.positionDefault.x\r\n                // let centerY = ((230+this.height)-this.positionDefault.y)/2+this.positionDefault.y\r\n                //let r = ((230+this.height)-this.positionDefault.y)/2\r\n                // console.warn(this.positionDefault.y)\r\n                // console.warn(Math.cos(this.coss))\r\n                // console.warn(Math.sin(this.coss))\r\n                if (this.position.y < this.positionDefault.y) {\r\n                    //console.log(\"jajajaja\");\r\n                    this.position.y += velocity.y;\r\n                    if (this.positionDefault.x > canvas.width / 2) {\r\n                        this.position.x += 3;\r\n                    }\r\n                    else {\r\n                        this.position.x += -3; //Math.floor(Math.random() * 15000)*0.0001\r\n                    }\r\n                }\r\n                if (this.position.y < 230 &&\r\n                    this.position.y >= this.positionDefault.y) {\r\n                    //console.log(Math.sin(this.coss))\r\n                    this.position.y += Math.sin(this.coss);\r\n                    if (this.positionDefault.x > canvas.width / 2) {\r\n                        // console.log(\"eeee\")\r\n                        // console.log(Math.sqrt(Math.pow((230-this.positionDefault.y)/2,2)- Math.pow((230-this.positionDefault.y)-(230-this.position.y)/2,2)))\r\n                        // this.position.x += Math.sqrt(Math.pow((230-this.positionDefault.y)/2,2)-Math.pow((230-this.positionDefault.y)/2-velocity.y,2));\r\n                        this.position.x += Math.cos(this.coss) + 0.3; //this.positionDefault.x+ Math.sqrt(Math.pow((230-this.positionDefault.y)/2,2)- Math.pow((230-this.positionDefault.y)-(230-this.position.y)/2,2));\r\n                        //stretchFactor * Math.sin(progress * 2 * Math.PI)\r\n                    }\r\n                    else {\r\n                        this.position.x -= Math.cos(this.coss) + 0.3; //this.positionDefault.x -Math.sqrt(Math.pow((230-this.positionDefault.y)/2,2)- Math.pow((230-this.positionDefault.y)-(230-this.position.y)/2,2));\r\n                    }\r\n                }\r\n                if (this.position.y >= 230) {\r\n                    this.position.y += velocity.y;\r\n                    if (this.positionDefault.x > canvas.width / 2) {\r\n                        this.position.x += -3;\r\n                    }\r\n                    else {\r\n                        this.position.x += 3; //Math.floor(Math.random() * 15000)*0.0001\r\n                    }\r\n                }\r\n                // if (player.position.x < this.positionDefault.x) {\r\n                //   this.position.x += -2;\r\n                //   // let direction = Math.floor(Math.random() * 100000000)\r\n                //   // if (direction <=5000000){\r\n                //   //   this.position.x += 2;\r\n                //   // } else{\r\n                //   //   this.position.x += -2;\r\n                //   // }\r\n                // }\r\n                // if (player.position.x > this.positionDefault.x) {\r\n                //   this.position.x += 2;\r\n                //   // let direction = Math.floor(Math.random() * 100000000)\r\n                //   // if (direction  <=5000000){\r\n                //   //   this.position.x += 2;\r\n                //   // } else{\r\n                //   //   this.position.x += -2;\r\n                //   // }\r\n                // }\r\n                //console.log(this.position.y)\r\n                this.selectedToAttack = selectedToAttack;\r\n            }\r\n            else if (this.position.y < this.positionGrid.y) {\r\n                this.position.y += velocity.y;\r\n            }\r\n            else if (this.position.y === canvas.height ||\r\n                this.position.y === canvas.height + 1 ||\r\n                this.position.y === canvas.height + 2 ||\r\n                this.position.y >= canvas.height) {\r\n                //console.log(\"wchodzi\");\r\n                this.position.y = 0;\r\n            }\r\n        }\r\n        else if (velocity.x === 0 && velocity.y === 0) {\r\n            this.selectedToAttack = selectedToAttack;\r\n            if (this.mainIDNumber === 1) {\r\n                this.idNumber = 1;\r\n            }\r\n            if (this.mainIDNumber === 2) {\r\n                this.idNumber = 2;\r\n            }\r\n            if (this.mainIDNumber === 3) {\r\n                this.idNumber = 3;\r\n            }\r\n            if (this.mainIDNumber === 4) {\r\n                this.idNumber = 4;\r\n            }\r\n        }\r\n        else if (velocity.y === 0) {\r\n            this.mover += 1;\r\n            if (this.position.y > this.positionGrid.y) {\r\n                this.positionGrid.x += velocity.x;\r\n            }\r\n            //console.log(this.velocity.x)\r\n            if (this.position.y <= this.positionGrid.y) {\r\n                this.position.x = this.positionGrid.x;\r\n                //console.log(this.mover)\r\n                //console.log(this.mover)\r\n                this.position.x += velocity.x;\r\n                this.positionGrid.x += velocity.x;\r\n                // this.position.y += velocity.y;\r\n            }\r\n            if (Math.floor(this.mover) % 150 === 0) {\r\n                //console.log(Math.floor(this.mover));\r\n                if (modelPosition) {\r\n                    this.modelPosition = false;\r\n                }\r\n                else if (!modelPosition) {\r\n                    this.modelPosition = true;\r\n                }\r\n                if (this.idNumber === 1) {\r\n                    //this.id = id;\r\n                    if (modelPosition) {\r\n                        this.image.src = \"./src/img/invader_one_stay_down.png\";\r\n                    }\r\n                    else {\r\n                        this.image.src = \"./src/img/invader_one_stay_up.png\";\r\n                    }\r\n                }\r\n                else if (this.idNumber === 2) {\r\n                    //this.id = id;\r\n                    if (modelPosition) {\r\n                        this.image.src = \"./src/img/invader_two_stay_down.png\";\r\n                    }\r\n                    else {\r\n                        this.image.src = \"./src/img/invader_two_stay_up.png\";\r\n                    }\r\n                    //   console.log(this.id)\r\n                }\r\n                else if (this.idNumber === 3) {\r\n                    //this.id = id;\r\n                    if (modelPosition) {\r\n                        this.image.src = \"./src/img/invader_three_stay_down.png\";\r\n                    }\r\n                    else {\r\n                        this.image.src = \"./src/img/invader_three_stay_up.png\";\r\n                    }\r\n                }\r\n                else if (this.idNumber === 4) {\r\n                    //this.id = id;\r\n                    if (modelPosition) {\r\n                        this.image.src = \"./src/img/invader_four_stay_down.png\";\r\n                    }\r\n                    else {\r\n                        this.image.src = \"./src/img/invader_four_stay_up.png\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // this.position.x = Math.floor(this.mover)\r\n    };\r\n    return Invader;\r\n}());\r\nvar Grid = /** @class */ (function () {\r\n    function Grid() {\r\n        this.position = { x: 100, y: 30 };\r\n        this.velocity = { x: 0.15, y: 0 };\r\n        this.invaders = [];\r\n        this.width = 0;\r\n        this.mover = 0;\r\n        this.modelPosition = true;\r\n        this.width = 10 * 50;\r\n        for (var i = 0; i < defaultArrayInvaders.length; i++) {\r\n            if (i % 2 === 0) {\r\n                this.modelPosition = true;\r\n            }\r\n            else {\r\n                this.modelPosition = false;\r\n            }\r\n            for (var j = 0; j < defaultArrayInvaders[i].length; j++) {\r\n                this.invaders.push(new Invader({ x: j * 50 + canvas.width / 6, y: i * 30 + 100 }, i, j, defaultArrayInvaders[i][j], this.modelPosition));\r\n                //console.log(this.modelPosition);\r\n                if (this.modelPosition) {\r\n                    this.modelPosition = false;\r\n                }\r\n                else if (!this.modelPosition) {\r\n                    this.modelPosition = true;\r\n                }\r\n            }\r\n            //console.log(this.invaders);\r\n        }\r\n        //console.log(this.invaders);\r\n    }\r\n    Grid.prototype.update = function () {\r\n        this.mover += this.velocity.x;\r\n        // console.log(Math.floor(this.mover));\r\n        this.position.x += this.velocity.x;\r\n        //  this.position.x = Math.floor(this.position.x)\r\n        // console.log(this.position.x);\r\n        // if (Math.floor(this.mover)%1 ===0){\r\n        //     console.log(Math.floor(this.mover))\r\n        // //     this.position.x += this.mover\r\n        // }\r\n        if (this.position.x + this.width >= canvas.width) {\r\n            this.velocity.x = -this.velocity.x;\r\n        }\r\n        else if (this.position.x <= 0) {\r\n            this.velocity.x = -this.velocity.x;\r\n        }\r\n    };\r\n    return Grid;\r\n}());\r\n//tło\r\nvar BackgroundStars = /** @class */ (function () {\r\n    function BackgroundStars(position, velocity, radius, color, fades) {\r\n        this.position = { x: 0, y: 0 };\r\n        this.velocity = { x: 0, y: 0 };\r\n        this.radius = 3;\r\n        this.color = \"red\";\r\n        this.opacity = 1;\r\n        this.fades = false;\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.fades = fades;\r\n    }\r\n    BackgroundStars.prototype.draw = function () {\r\n        context.save();\r\n        context.globalAlpha = this.opacity;\r\n        context.beginPath();\r\n        context.rect(this.position.x, this.position.y, 5, 5);\r\n        context.fillStyle = this.color;\r\n        context.fill();\r\n        context.closePath();\r\n        context.restore();\r\n    };\r\n    BackgroundStars.prototype.update = function () {\r\n        this.draw();\r\n        this.position.x += this.velocity.x;\r\n        this.position.y += this.velocity.y;\r\n        if (this.fades) {\r\n            this.opacity -= 0.03;\r\n        }\r\n    };\r\n    return BackgroundStars;\r\n}());\r\n/////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////\r\n//KONIEC KLAS\r\n/////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////\r\n//wywołanie klasy statku\r\nvar player = new Player();\r\n//wyniki góra\r\nvar results = new Results();\r\n//wyniki dół\r\nvar resultsStats = new ResultsStats();\r\n//tablica strałów z określeniem pozycji\r\nvar projectiles = [];\r\n//tablica strałów z określeniem pozycji\r\nvar invaderProjectiles = [];\r\n//wybuchy\r\nvar particles = [];\r\n//tło\r\nvar backgroundStars = [];\r\n//wywołanie klasy grid z invaderami\r\nvar grids = [new Grid()];\r\nvar gridsP1 = [new Grid()];\r\nvar gridsP2 = [new Grid()];\r\n//interval muzyki\r\nvar intervalMusicGrid;\r\n//tryb\r\nvar mode = \"player1\";\r\nvar keys = {\r\n    a: {\r\n        pressed: false,\r\n    },\r\n    d: {\r\n        pressed: false,\r\n    },\r\n    space: {\r\n        pressed: false,\r\n    },\r\n    arrowLeft: {\r\n        pressed: false,\r\n    },\r\n    arrowRight: {\r\n        pressed: false,\r\n    },\r\n    arrowUp: {\r\n        pressed: false,\r\n    },\r\n    f3: {\r\n        pressed: false,\r\n    },\r\n    restart: {\r\n        pressed: false,\r\n    },\r\n};\r\n//ktoś lata\r\nvar fly;\r\n//tworzenie wybuchów\r\nfunction createParticles(object) {\r\n    //console.log(object);\r\n    for (var i = 0; i < 15; i++) {\r\n        //console.log(invader);\r\n        var color1 = \"\";\r\n        var color2 = \"\";\r\n        var color3 = \"\";\r\n        var opacityCounter = 0;\r\n        if (object.idNumber !== 44) {\r\n            if (object.idNumber === 1 || object.idNumber === 11) {\r\n                color1 = \"#0092bb\";\r\n                color2 = \"#5032ab\";\r\n                color3 = \"#4c0307\";\r\n                opacityCounter = 0.025;\r\n            }\r\n            else if (object.idNumber === 2 || object.idNumber === 22) {\r\n                color1 = \"#9570f5\";\r\n                color2 = \"#5035af\";\r\n                color3 = \"#65730c\";\r\n                opacityCounter = 0.025;\r\n            }\r\n            else if (object.idNumber === 3 || object.idNumber === 33) {\r\n                color1 = \"#842a01\";\r\n                color2 = \"#00825f\";\r\n                color3 = \"#a7b028\";\r\n                opacityCounter = 0.025;\r\n            }\r\n            else if (object.idNumber === 4) {\r\n                color1 = \"#a8b324\";\r\n                color2 = \"#ad5213\";\r\n                color3 = \"#b898f4\";\r\n                opacityCounter = 0.025;\r\n            }\r\n            else if (object.idNumber === 10) {\r\n                color1 = \"#6c7cf4\";\r\n                color2 = \"#e3b8fd\";\r\n                color3 = \"#aa5214\";\r\n                opacityCounter = 0.015;\r\n            }\r\n            particles.push(new Particle({\r\n                x: object.position.x + object.width / 2,\r\n                y: object.position.y + object.height / 2,\r\n            }, { x: Math.random() - 0.5, y: Math.random() - 0.5 }, Math.random() * 3, color1, true, opacityCounter, object.idNumber));\r\n            particles.push(new Particle({\r\n                x: object.position.x + object.width / 2,\r\n                y: object.position.y + object.height / 2,\r\n            }, { x: Math.random() - 0.5, y: Math.random() - 0.5 }, Math.random() * 3, color2, true, opacityCounter, object.idNumber));\r\n            particles.push(new Particle({\r\n                x: object.position.x + object.width / 2,\r\n                y: object.position.y + object.height / 2,\r\n            }, { x: Math.random() - 0.5, y: Math.random() - 0.5 }, Math.random() * 5, color3, true, opacityCounter, object.idNumber));\r\n        }\r\n        if (object.idNumber === 44) {\r\n            particles.push(new Particle({\r\n                x: object.position.x + object.width / 2,\r\n                y: object.position.y + object.height / 2,\r\n            }, { x: 0, y: 0 }, 1, \"#FFDAB2\", true, 0.025, object.idNumber));\r\n        }\r\n    }\r\n}\r\n//kolejne życie statku\r\nfunction nextLife() {\r\n    if (results.mode === \"TWO PLAYER\") {\r\n        // console.log(player.player);\r\n        switch (player.player) {\r\n            case 1:\r\n                player.player = 2;\r\n                break;\r\n            case 2:\r\n                player.player = 1;\r\n                break;\r\n        }\r\n    }\r\n    //console.log(player.player);\r\n    keys.a.pressed = false;\r\n    keys.d.pressed = false;\r\n    keys.arrowLeft.pressed = false;\r\n    keys.arrowRight.pressed = false;\r\n    //console.warn(\"restart życia\");\r\n    setTimeout(function () {\r\n        results.draw(-1, 1, -1, \"game\");\r\n        if (player.playGame) {\r\n            new Audio(\"./../src/mp3/start.mp3\").play();\r\n        }\r\n    }, 1000);\r\n    setTimeout(function () {\r\n        player.position.x = canvas.width / 2 - player.width / 2;\r\n        player.opacity = 1;\r\n        player.velocity.x = 0;\r\n        player.position.y = canvas.height - player.height - 60;\r\n        //player.lifeNow = true;\r\n        if (player.playGame) {\r\n            projectiles.push(new Projectile({\r\n                x: player.position.x + player.width / 2,\r\n                y: player.position.y - 5,\r\n            }, { x: 0, y: 0 }));\r\n        }\r\n    }, 2000);\r\n}\r\n//wywoływanie animacji\r\nvar myReq;\r\nfunction animate() {\r\n    // setTimeout(() => {\r\n    //     animate()\r\n    // },100)\r\n    myReq = requestAnimationFrame(animate);\r\n    //console.log(myReq)\r\n    //console.log(\"test Animate\");\r\n    //zmiana koloru tła\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    //statek\r\n    player.update();\r\n    //   invader.update()\r\n    //tło\r\n    backgroundStars.forEach(function (star, index) {\r\n        //tło\r\n        //console.log(star)\r\n        if (star.position.y - star.radius >= canvas.height) {\r\n            var x = Math.random() * canvas.width;\r\n            star.position.x = x;\r\n            star.position.y = -star.radius;\r\n            star.color = colorTab[Math.round(x / 4)];\r\n        }\r\n        //reszta\r\n        if (star.opacity <= 0) {\r\n            setTimeout(function () {\r\n                backgroundStars.splice(index, 1);\r\n            }, 0);\r\n        }\r\n        else {\r\n            star.update();\r\n        }\r\n    });\r\n    //wybuch tablica\r\n    particles.forEach(function (particle, index) {\r\n        //reszta\r\n        if (particle.opacity <= 0) {\r\n            setTimeout(function () {\r\n                particles.splice(index, 1);\r\n            }, 0);\r\n        }\r\n        else {\r\n            particle.update();\r\n        }\r\n    });\r\n    //console.log(particles)\r\n    //strzały tablica aktualizacja\r\n    projectiles.forEach(function (projectile, index) {\r\n        if (projectile.position.y + projectile.radius <= 0) {\r\n            setTimeout(function () {\r\n                projectiles.splice(index, 1);\r\n            }, 0);\r\n        }\r\n        else {\r\n            projectile.update();\r\n        }\r\n    });\r\n    //strzały invadera tablica aktualizacja\r\n    invaderProjectiles.forEach(function (invaderProjectile, index) {\r\n        //console.log(invaderProjectile)\r\n        if (invaderProjectile.position.y + invaderProjectile.radius >=\r\n            canvas.height) {\r\n            setTimeout(function () {\r\n                invaderProjectiles.splice(index, 1);\r\n                //console.log(\"usuwa\");\r\n            }, 0);\r\n        }\r\n        else {\r\n            invaderProjectile.update();\r\n        }\r\n        //zestrzelenie statku\r\n        if (invaderProjectile.position.y - invaderProjectile.radius <=\r\n            player.position.y + player.height &&\r\n            invaderProjectile.position.x + invaderProjectile.radius >=\r\n                player.position.x &&\r\n            invaderProjectile.position.x - invaderProjectile.radius <=\r\n                player.position.x + player.width &&\r\n            invaderProjectile.position.y + invaderProjectile.radius >=\r\n                player.position.y) {\r\n            setTimeout(function () {\r\n                if (player.playGame) {\r\n                    new Audio(\"./../src/mp3/kill_player.mp3\").play();\r\n                }\r\n                invaderProjectiles.splice(index, 1);\r\n                player.opacity = 0;\r\n                player.position.y = -10000;\r\n                player.backgroundStart = false;\r\n                player.lifeNow = false;\r\n                player.lifeNow2 = false;\r\n                //console.log(invaderProjectile);\r\n                projectiles.splice(-1);\r\n                var findReady = setInterval(function () {\r\n                    //console.log(fly)\r\n                    if (fly !== undefined) {\r\n                        //flyInvader()\r\n                        //console.log(\"przerwa\");\r\n                    }\r\n                    if (fly === undefined) {\r\n                        clearInterval(findReady);\r\n                        nextLife();\r\n                        setTimeout(function () {\r\n                            flyInvader();\r\n                        }, 2000);\r\n                    }\r\n                }, 1);\r\n            });\r\n            createParticles(player);\r\n            //console.log(\"coraz bliżej zestrzelenia\");\r\n        }\r\n    });\r\n    //console.log(invaderProjectiles)\r\n    //grid aktualizacja\r\n    grids.forEach(function (grid) {\r\n        grid.update();\r\n        // console.log(grid)\r\n        //console.log(grid.invaders)\r\n        grid.invaders.forEach(function (invader, invaIndex) {\r\n            // console.log(invader);\r\n            //   setInterval(() => {\r\n            invader.update(grid.velocity, invader.modelPosition, invader.selectedToAttack);\r\n            //   },1000);\r\n            //zestrzelenie\r\n            projectiles.forEach(function (projectile, proIndex) {\r\n                if (projectile.position.y - projectile.radius <=\r\n                    invader.position.y + invader.height &&\r\n                    projectile.position.x + projectile.radius >= invader.position.x &&\r\n                    projectile.position.x - projectile.radius <=\r\n                        invader.position.x + invader.width &&\r\n                    projectile.position.y + projectile.radius >= invader.position.y &&\r\n                    invader.idNumber !== 0) {\r\n                    setTimeout(function () {\r\n                        var invaderFound = grid.invaders.find(function (invader2) {\r\n                            return invader2 === invader;\r\n                        });\r\n                        var projectileFound = projectiles.find(function (projectile2) {\r\n                            return projectile2 === projectile;\r\n                        });\r\n                        //usuwanie przeciwnika i strzału\r\n                        if (invaderFound && projectileFound) {\r\n                            //wybuch\r\n                            createParticles(invader);\r\n                            //usuwanie\r\n                            //   console.log(grid.invaders.length)\r\n                            // console.log(invader.id);\r\n                            if (invader.idNumber === 1) {\r\n                                results.draw(30, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 2) {\r\n                                results.draw(40, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 3) {\r\n                                results.draw(50, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 4) {\r\n                                results.draw(60, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 11) {\r\n                                results.draw(60, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 22) {\r\n                                results.draw(80, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 33) {\r\n                                results.draw(100, -1, -1, \"game\");\r\n                            }\r\n                            else if (invader.idNumber === 44) {\r\n                                results.draw(200, -1, -1, \"game\");\r\n                            }\r\n                            //   console.log(invader)\r\n                            if (player.playGame) {\r\n                                if (invader.selectedToAttack) {\r\n                                    new Audio(\"./../src/mp3/kill_invader_fly.mp3\").play();\r\n                                }\r\n                                if (!invader.selectedToAttack) {\r\n                                    new Audio(\"./../src/mp3/kill_invader_grid.mp3\").play();\r\n                                }\r\n                            }\r\n                            //console.log(invader);\r\n                            var invaderToRemove = invader.idText\r\n                                .split(\"_\")\r\n                                .map(function (item) {\r\n                                return parseInt(item, 10);\r\n                            });\r\n                            //console.log(invaderToRemove);\r\n                            invader.update({ x: -1, y: -1 }, invader.modelPosition, invader.selectedToAttack);\r\n                            grid.invaders.splice(invaIndex, 1);\r\n                            projectiles.splice(proIndex, 1);\r\n                            // console.log(defaultArrayInvaders)\r\n                            removedInvaders.push(invaderToRemove);\r\n                            //console.log(removedInvaders);\r\n                            //console.log(arrayInvaders);\r\n                            //defaultArrayInvaders = arrayInvaders\r\n                            for (var i = 0; i < arrayInvaders.length; i++) {\r\n                                for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                    // console.log(removedInvaders)\r\n                                    // console.log(removedInvaders[i][1])\r\n                                    defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                                }\r\n                            }\r\n                            for (var i = 0; i < removedInvaders.length; i++) {\r\n                                // console.log(removedInvaders)\r\n                                //console.log(removedInvaders[i][1]);\r\n                                defaultArrayInvaders[removedInvaders[i][0]][removedInvaders[i][1]] = 0;\r\n                                //console.log(defaultArrayInvaders);\r\n                            }\r\n                            // defaultArrayInvaders[invaderToRemove[0]][invaderToRemove[1]] = 0;\r\n                            //  console.log(defaultArrayInvaders)\r\n                            // console.log(grid.invaders.length);\r\n                            //najbardziej z lewej\r\n                            // console.warn(grid.invaders.length);\r\n                            // console.warn(grid.invaders);\r\n                            // console.warn(invaIndex);\r\n                            if (grid.invaders.length > 13) {\r\n                                var start = [];\r\n                                start.push(defaultArrayInvaders[0].findIndex(function (element) { return element > 0; }));\r\n                                start.push(defaultArrayInvaders[1].findIndex(function (element) { return element > 0; }));\r\n                                start.push(defaultArrayInvaders[2].findIndex(function (element) { return element > 0; }));\r\n                                start.push(defaultArrayInvaders[3].findIndex(function (element) { return element > 0; }));\r\n                                start.push(defaultArrayInvaders[4].findIndex(function (element) { return element > 0; }));\r\n                                //console.log(start);\r\n                                //console.log(defaultArrayInvaders);\r\n                                for (var i = 0; i < start.length; i++) {\r\n                                    if (start[i] === -1) {\r\n                                        //console.log(\"wchodzi\");\r\n                                        start[i] = 9;\r\n                                    }\r\n                                }\r\n                                var minStart = Math.min.apply(Math, start);\r\n                                //console.log(minStart);\r\n                                var posStart_1 = \"0_\" + minStart;\r\n                                var firstInvader = grid.invaders.find(function (element) { return element.idText === posStart_1; });\r\n                                //najbardziej z prawej\r\n                                var stopInv = [];\r\n                                stopInv.push(9 -\r\n                                    defaultArrayInvaders[0]\r\n                                        .reverse()\r\n                                        .findIndex(function (element) { return element > 0; }));\r\n                                stopInv.push(9 -\r\n                                    defaultArrayInvaders[1]\r\n                                        .reverse()\r\n                                        .findIndex(function (element) { return element > 0; }));\r\n                                stopInv.push(9 -\r\n                                    defaultArrayInvaders[2]\r\n                                        .reverse()\r\n                                        .findIndex(function (element) { return element > 0; }));\r\n                                stopInv.push(9 -\r\n                                    defaultArrayInvaders[3]\r\n                                        .reverse()\r\n                                        .findIndex(function (element) { return element > 0; }));\r\n                                stopInv.push(9 -\r\n                                    defaultArrayInvaders[4]\r\n                                        .reverse()\r\n                                        .findIndex(function (element) { return element > 0; }));\r\n                                //console.log(stopInv);\r\n                                defaultArrayInvaders[0].reverse();\r\n                                defaultArrayInvaders[1].reverse();\r\n                                defaultArrayInvaders[2].reverse();\r\n                                defaultArrayInvaders[3].reverse();\r\n                                defaultArrayInvaders[4].reverse();\r\n                                //console.log(defaultArrayInvaders);\r\n                                for (var i = 0; i < stopInv.length; i++) {\r\n                                    if (stopInv[i] === 10) {\r\n                                        //console.log(\"wchodzi\");\r\n                                        stopInv[i] = 0;\r\n                                    }\r\n                                }\r\n                                //console.log(stopInv);\r\n                                var maxStop = Math.max.apply(Math, stopInv);\r\n                                //console.log(maxStop);\r\n                                var posStop_1 = \"0_\" + maxStop;\r\n                                var lastInvader = grid.invaders.find(function (element) { return element.idText === posStop_1; });\r\n                                //console.log(lastInvader);\r\n                                try {\r\n                                    grid.width =\r\n                                        lastInvader.position.x - firstInvader.position.x + 31.2;\r\n                                    grid.position.x = firstInvader.position.x;\r\n                                }\r\n                                catch (_a) {\r\n                                    grid.width = 300;\r\n                                }\r\n                            }\r\n                            //kolejny level\r\n                            else if (grid.invaders.length <= 13) {\r\n                                // console.log(\"wchodzi pierwszy\");\r\n                                grids = [];\r\n                                setTimeout(function () {\r\n                                    grid.invaders = [];\r\n                                    removedInvaders = [];\r\n                                    for (var i = 0; i < arrayInvaders.length; i++) {\r\n                                        for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                            // console.log(removedInvaders)\r\n                                            // console.log(removedInvaders[i][1])\r\n                                            defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                                        }\r\n                                    }\r\n                                    //console.log(arrayInvaders);\r\n                                    grids = [new Grid()];\r\n                                    results.draw(-1, -1, 1, \"game\");\r\n                                    //player.position.x = canvas.width / 2 - player.width / 2;\r\n                                    if (results.mode === \"TWO PLAYER\") {\r\n                                        switch (player.player) {\r\n                                            case 1:\r\n                                                //console.log(\"jest dwóch\");\r\n                                                player.backgroundStart = false;\r\n                                                player.lifeNow = true;\r\n                                                //gridsP1 = [new Grid()];\r\n                                                break;\r\n                                            case 2:\r\n                                                player.backgroundStart = false;\r\n                                                player.lifeNow2 = true;\r\n                                                //gridsP2 = [new Grid()];\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                    if (results.mode === \"ONE PLAYER\") {\r\n                                        player.backgroundStart = false;\r\n                                        player.lifeNow = true;\r\n                                        player.lifeNow2 = false;\r\n                                    }\r\n                                    cancelAnimationFrame(myReq);\r\n                                    animate();\r\n                                }, 3000);\r\n                                //console.log(\"eejeje\");\r\n                            }\r\n                        }\r\n                    }, 0);\r\n                }\r\n            });\r\n        });\r\n    });\r\n    //przemieszczanie się statku\r\n    if ((keys.a.pressed && player.position.x >= 0) ||\r\n        (keys.arrowLeft.pressed && player.position.x >= 0)) {\r\n        // console.log(keys.a.pressed);\r\n        player.velocity.x = -5;\r\n        // //zmiana położenia - PRZYDA SIĘ DO RUCHU PRZECIWNIKÓW\r\n        // player.rotation = -.15\r\n        if (canShot === true) {\r\n            //console.log(projectiles);\r\n            projectiles.splice(-1);\r\n            projectiles.push(new Projectile({\r\n                x: player.position.x + player.width / 2 - 4.5,\r\n                y: player.position.y - 2,\r\n            }, { x: 0, y: 0 }));\r\n        }\r\n    }\r\n    else if ((keys.d.pressed && player.position.x <= canvas.width - player.width) ||\r\n        (keys.arrowRight.pressed &&\r\n            player.position.x <= canvas.width - player.width)) {\r\n        player.velocity.x = 5;\r\n        if (canShot === true) {\r\n            //console.log(projectiles);\r\n            projectiles.splice(-1);\r\n            projectiles.push(new Projectile({\r\n                x: player.position.x + player.width / 2 + 4.5,\r\n                y: player.position.y - 2,\r\n            }, { x: 0, y: 0 }));\r\n        }\r\n    }\r\n    else {\r\n        player.velocity.x = 0;\r\n    }\r\n    //wyniki góra\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvasResults.width, canvasResults.height);\r\n    results.update();\r\n    //wyniki dół\r\n    contextResultsStats.fillStyle = \"black\";\r\n    contextResultsStats.fillRect(0, 0, canvasResultsStats.width, canvasResultsStats.height);\r\n    resultsStats.update();\r\n    //lata\r\n    try {\r\n        fly = grids[0].invaders.find(function (element) {\r\n            if (element.selectedToAttack) {\r\n                //console.log(element)\r\n                return element;\r\n            }\r\n        });\r\n    }\r\n    catch (_a) {\r\n        fly = undefined;\r\n    }\r\n}\r\nanimate();\r\n//addewentlistener\r\naddEventListener(\"keydown\", function (event) {\r\n    //console.log(event.key);\r\n    event.preventDefault();\r\n    if (player.lifeNow === true &&\r\n        player.playGame === true &&\r\n        player.clearTitle === true) {\r\n        //console.log(player.lifeNow);\r\n        switch (event.key) {\r\n            case \"a\":\r\n                //console.log(\"left\");\r\n                keys.a.pressed = true;\r\n                break;\r\n            case \"A\":\r\n                //console.log(\"left\");\r\n                keys.a.pressed = true;\r\n                break;\r\n            case \"d\":\r\n                //console.log(\"right\");\r\n                keys.d.pressed = true;\r\n                break;\r\n            case \"D\":\r\n                //console.log(\"right\");\r\n                keys.d.pressed = true;\r\n                break;\r\n            case \" \":\r\n                // console.log(\"Space\");\r\n                //   new Projectile().position.x = 400\r\n                //strał z określeniem pozycji\r\n                shot();\r\n                //console.log(projectiles)\r\n                keys.space.pressed = true;\r\n                break;\r\n        }\r\n    }\r\n    if (player.lifeNow2 === true &&\r\n        player.playGame === true &&\r\n        player.clearTitle === true) {\r\n        //console.log(player.lifeNow2);\r\n        switch (event.key) {\r\n            case \"ArrowLeft\":\r\n                //console.log(\"left\");\r\n                keys.arrowLeft.pressed = true;\r\n                break;\r\n            case \"ArrowRight\":\r\n                //console.log(\"right\");\r\n                keys.arrowRight.pressed = true;\r\n                break;\r\n            case \"ArrowUp\":\r\n                // console.log(\"Space\");\r\n                //   new Projectile().position.x = 400\r\n                //strał z określeniem pozycji\r\n                shot();\r\n                //console.log(projectiles)\r\n                keys.arrowUp.pressed = true;\r\n                break;\r\n        }\r\n    }\r\n    if (player.lifeNow === false &&\r\n        player.playGame === false &&\r\n        player.clearTitle === true) {\r\n        switch (event.key) {\r\n            case \"F2\":\r\n                setTimeout(function () {\r\n                    event.preventDefault();\r\n                    keys.restart.pressed = true;\r\n                    //console.log(\"F2\");\r\n                    //console.log(invaderProjectiles);\r\n                    grids = [];\r\n                    gridsP1 = [];\r\n                    gridsP2 = [];\r\n                    removedInvaders = [];\r\n                    projectiles = [];\r\n                    invaderProjectiles = [];\r\n                    results.draw(-1, -1, -1, \"start\");\r\n                    //console.log(invaderProjectiles);\r\n                    //dźwięk\r\n                    // let audio = new Audio(\"./../mp3/start.mp3\");\r\n                    new Audio(\"./../src/mp3/start.mp3\").play();\r\n                    new Audio(\"./../src/mp3/grid.mp3\").play();\r\n                    intervalMusicGrid = setInterval(function () {\r\n                        new Audio(\"./../src/mp3/grid.mp3\").play();\r\n                    }, 2000);\r\n                    setTimeout(function () {\r\n                        player.backgroundStart = false;\r\n                        player.lifeNow = true;\r\n                        player.lifeNow2 = false;\r\n                        player.playGame = true;\r\n                    }, 1000);\r\n                    setTimeout(function () {\r\n                        grids = [];\r\n                        gridsP1 = [];\r\n                        gridsP2 = [];\r\n                        removedInvaders = [];\r\n                        projectiles = [];\r\n                        invaderProjectiles = [];\r\n                        for (var i = 0; i < arrayInvaders.length; i++) {\r\n                            for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                // console.log(removedInvaders)\r\n                                // console.log(removedInvaders[i][1])\r\n                                defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                            }\r\n                        }\r\n                        //console.log(arrayInvaders);\r\n                        grids = [new Grid()];\r\n                        gridsP1 = [new Grid()];\r\n                        gridsP2 = [new Grid()];\r\n                        player.position.x = canvas.width / 2 - player.width / 2;\r\n                        projectiles.push(new Projectile({\r\n                            x: player.position.x + player.width / 2,\r\n                            y: player.position.y - 5,\r\n                        }, { x: 0, y: 0 }));\r\n                        resultsStats.draw(mode, 0, 0);\r\n                        cancelAnimationFrame(myReq);\r\n                        animate();\r\n                        keys.f3.pressed = false;\r\n                    }, 0);\r\n                }, 0);\r\n                break;\r\n            case \"F3\":\r\n                event.preventDefault();\r\n                //console.log(\"F3\");\r\n                keys.f3.pressed = true;\r\n                results.draw(-1, -1, -1, \"selectMode\");\r\n                break;\r\n            case \"F4\":\r\n                if (keys.f3.pressed) {\r\n                    event.preventDefault();\r\n                    //console.log(\"F4\");\r\n                    switch (mode) {\r\n                        case \"player1\":\r\n                            mode = \"player2\";\r\n                            break;\r\n                        case \"player2\":\r\n                            mode = \"player1\";\r\n                            break;\r\n                    }\r\n                    results.draw(-1, -1, -1, mode);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    if (player.clearTitle === false) {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                var titleDiv = document.getElementById(\"instruction\");\r\n                titleDiv.remove();\r\n                player = new Player();\r\n                player.clearTitle = true;\r\n                setTimeout(function () {\r\n                    event.preventDefault();\r\n                    keys.restart.pressed = true;\r\n                    grids = [];\r\n                    gridsP1 = [];\r\n                    gridsP2 = [];\r\n                    removedInvaders = [];\r\n                    projectiles = [];\r\n                    invaderProjectiles = [];\r\n                    results.draw(-1, -1, -1, \"restart\");\r\n                    player.backgroundStart = true;\r\n                    player.lifeNow = false;\r\n                    player.lifeNow2 = false;\r\n                    player.playGame = false;\r\n                    new Audio(\"./../src/mp3/restart.mp3\").play();\r\n                    setTimeout(function () {\r\n                        //player = ''\r\n                        grids = [];\r\n                        gridsP1 = [];\r\n                        gridsP2 = [];\r\n                        removedInvaders = [];\r\n                        projectiles = [];\r\n                        invaderProjectiles = [];\r\n                        for (var i = 0; i < arrayInvaders.length; i++) {\r\n                            for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                // console.log(removedInvaders)\r\n                                // console.log(removedInvaders[i][1])\r\n                                defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                            }\r\n                        }\r\n                        //console.log(arrayInvaders);\r\n                        grids = [new Grid()];\r\n                        gridsP1 = [new Grid()];\r\n                        gridsP2 = [new Grid()];\r\n                        player.position.x = canvas.width / 2 - player.width / 2;\r\n                        if (player.playGame) {\r\n                            projectiles.push(new Projectile({\r\n                                x: player.position.x + player.width / 2,\r\n                                y: player.position.y - 5,\r\n                            }, { x: 0, y: 0 }));\r\n                        }\r\n                        cancelAnimationFrame(myReq);\r\n                        animate();\r\n                        results.draw(-1, -1, -1, \"restart\");\r\n                        player.lifeNow = false;\r\n                        player.lifeNow2 = false;\r\n                        player.playGame = false;\r\n                        player.backgroundStart = true;\r\n                    }, 0);\r\n                }, 10);\r\n                break;\r\n        }\r\n    }\r\n    if (player.clearTitle === true) {\r\n        switch (event.key) {\r\n            case \"F5\":\r\n                setTimeout(function () {\r\n                    event.preventDefault();\r\n                    keys.restart.pressed = true;\r\n                    grids = [];\r\n                    gridsP1 = [];\r\n                    gridsP2 = [];\r\n                    removedInvaders = [];\r\n                    projectiles = [];\r\n                    invaderProjectiles = [];\r\n                    results.draw(-1, -1, -1, \"restart\");\r\n                    player.backgroundStart = true;\r\n                    player.lifeNow = false;\r\n                    player.lifeNow2 = false;\r\n                    player.playGame = false;\r\n                    new Audio(\"./../src/mp3/restart.mp3\").play();\r\n                    setTimeout(function () {\r\n                        grids = [];\r\n                        gridsP1 = [];\r\n                        gridsP2 = [];\r\n                        removedInvaders = [];\r\n                        projectiles = [];\r\n                        invaderProjectiles = [];\r\n                        for (var i = 0; i < arrayInvaders.length; i++) {\r\n                            for (var j = 0; j < arrayInvaders[i].length; j++) {\r\n                                // console.log(removedInvaders)\r\n                                // console.log(removedInvaders[i][1])\r\n                                defaultArrayInvaders[i][j] = arrayInvaders[i][j];\r\n                            }\r\n                        }\r\n                        //console.log(arrayInvaders);\r\n                        grids = [new Grid()];\r\n                        gridsP1 = [new Grid()];\r\n                        gridsP2 = [new Grid()];\r\n                        player.position.x = canvas.width / 2 - player.width / 2;\r\n                        if (player.playGame) {\r\n                            projectiles.push(new Projectile({\r\n                                x: player.position.x + player.width / 2,\r\n                                y: player.position.y - 5,\r\n                            }, { x: 0, y: 0 }));\r\n                        }\r\n                        cancelAnimationFrame(myReq);\r\n                        animate();\r\n                        results.draw(-1, -1, -1, \"restart\");\r\n                        player.lifeNow = false;\r\n                        player.lifeNow2 = false;\r\n                        player.playGame = false;\r\n                        player.backgroundStart = true;\r\n                    }, 0);\r\n                }, 0);\r\n                break;\r\n        }\r\n    }\r\n});\r\nresults.draw(-1, -1, -1, \"restart\");\r\nplayer.lifeNow = false;\r\nplayer.lifeNow2 = false;\r\nplayer.playGame = false;\r\nplayer.backgroundStart = true;\r\naddEventListener(\"keyup\", function (event) {\r\n    //console.log(event.key);\r\n    if (player.lifeNow === true &&\r\n        player.playGame === true &&\r\n        player.clearTitle === true) {\r\n        switch (event.key) {\r\n            case \"a\":\r\n                //console.log(\"left\");\r\n                keys.a.pressed = false;\r\n                break;\r\n            case \"A\":\r\n                //console.log(\"left\");\r\n                keys.a.pressed = false;\r\n                break;\r\n            case \"d\":\r\n                //console.log(\"right\");\r\n                keys.d.pressed = false;\r\n                break;\r\n            case \"D\":\r\n                //console.log(\"right\");\r\n                keys.d.pressed = false;\r\n                break;\r\n            case \" \":\r\n                //console.log(\"Space\");\r\n                keys.space.pressed = false;\r\n                break;\r\n        }\r\n    }\r\n    if (player.lifeNow2 === true &&\r\n        player.playGame === true &&\r\n        player.clearTitle === true) {\r\n        switch (event.key) {\r\n            case \"ArrowLeft\":\r\n                //console.log(\"left\");\r\n                keys.arrowLeft.pressed = false;\r\n                break;\r\n            case \"ArrowRight\":\r\n                //console.log(\"right\");\r\n                keys.arrowRight.pressed = false;\r\n                break;\r\n            case \"ArrowUp\":\r\n                //console.log(\"Space\");\r\n                keys.arrowUp.pressed = false;\r\n                break;\r\n        }\r\n    }\r\n    if (player.lifeNow === false &&\r\n        player.playGame === false &&\r\n        player.clearTitle === true) {\r\n        switch (event.key) {\r\n            case \"F2\":\r\n                event.preventDefault();\r\n                keys.restart.pressed = false;\r\n            // console.log(event.key)\r\n        }\r\n    }\r\n    switch (event.key) {\r\n        case \"Enter\":\r\n            event.preventDefault();\r\n            keys.restart.pressed = false;\r\n        // console.log(event.key)\r\n    }\r\n    if (player.clearTitle === true) {\r\n        switch (event.key) {\r\n            case \"F5\":\r\n                event.preventDefault();\r\n                keys.restart.pressed = false;\r\n            // console.log(event.key)\r\n        }\r\n    }\r\n});\r\n//gotowość do boju\r\nvar canShot = true;\r\nif (player.playGame) {\r\n    projectiles.push(new Projectile({ x: player.position.x + player.width / 2, y: player.position.y - 5 }, { x: 0, y: 0 }));\r\n}\r\n//shot\r\nfunction shot() {\r\n    if (canShot === true) {\r\n        new Audio(\"./../src/mp3/shot_player.mp3\").play();\r\n        //console.log(projectiles);\r\n        projectiles.splice(-1);\r\n        projectiles.push(new Projectile({ x: player.position.x + player.width / 2, y: player.position.y - 5 }, { x: 0, y: -4 }));\r\n        canShot = false;\r\n        setTimeout(function () {\r\n            canShot = true;\r\n            projectiles.push(new Projectile({ x: player.position.x + player.width / 2, y: player.position.y - 5 }, { x: 0, y: 0 }));\r\n        }, 800);\r\n    }\r\n}\r\nfunction flyInvader() {\r\n    //console.log(player.lifeNow);\r\n    //console.log(player.lifeNow2);\r\n    //console.log(player.backgroundStart);\r\n    if (player.lifeNow === true ||\r\n        player.lifeNow2 === true ||\r\n        player.backgroundStart === true) {\r\n        if (defaultArrayInvaders.length > 0) {\r\n            var multiplier_1 = 0;\r\n            switch (player.player) {\r\n                case 1:\r\n                    multiplier_1 = results.level;\r\n                    break;\r\n                case 2:\r\n                    multiplier_1 = results.level2;\r\n                    break;\r\n            }\r\n            console.log(multiplier_1);\r\n            var timer = (Math.floor(Math.random() * 2500) + 300) / multiplier_1;\r\n            var moveY_1 = Math.floor(Math.random() * 4) + 2;\r\n            setTimeout(function () {\r\n                //console.log(\"invader\");\r\n                //randomowy index\r\n                var i = Math.floor(Math.random() * 5);\r\n                var j = 0;\r\n                // console.log(i);\r\n                // console.log(j);\r\n                // console.log(defaultArrayInvaders);\r\n                //wybieranie wiersza tablicy\r\n                var selectedRow = defaultArrayInvaders[i];\r\n                // console.log(selectedRow)\r\n                //lewo/prawo\r\n                var side = Math.floor(Math.random() * 2);\r\n                //lewo\r\n                if (side === 0) {\r\n                    j = selectedRow.findIndex(function (element) { return element > 0; });\r\n                }\r\n                //prawo\r\n                else {\r\n                    j = 9 - selectedRow.reverse().findIndex(function (element) { return element > 0; });\r\n                }\r\n                // console.log(defaultArrayInvaders[i][j]);\r\n                // while (selectedInvader === 0) {\r\n                //   i = Math.floor(Math.random() * 5);\r\n                //   j = Math.floor(Math.random() * 10);\r\n                //   selectedInvader = defaultArrayInvaders[i][j]\r\n                // }\r\n                // console.log(defaultArrayInvaders[i][j]);\r\n                //console.log(defaultArrayInvaders[i][j]);\r\n                try {\r\n                    var invader_1 = grids[0].invaders.find(function (element) { return element.idText === i + \"_\" + j; });\r\n                    var index_1 = grids[0].invaders.findIndex(function (element) { return element.idText === i + \"_\" + j; });\r\n                    // console.log(invader);\r\n                    // console.log(index);\r\n                    //console.log(grids[0].invaders);\r\n                    //console.log(grids[0].invaders);\r\n                    // while(invader.position.y <= canvas.height){\r\n                    //console.log(invader.selectedToAttack);\r\n                    if (!invader_1.selectedToAttack) {\r\n                        if (player.playGame) {\r\n                            new Audio(\"./../src/mp3/invader_fly.mp3\").play();\r\n                        }\r\n                        //console.log(invader.position);\r\n                        var defaultPositionY_1 = invader_1.position.y;\r\n                        if (invader_1.position.y >= defaultPositionY_1 &&\r\n                            invader_1.position.y <= 230) {\r\n                            var myIntervalCircle_1 = setInterval(function () {\r\n                                var velocity = { x: 0, y: moveY_1 };\r\n                                invader_1.update(velocity, invader_1.modelPosition, true);\r\n                                //console.warn(invader.position.y)\r\n                                if (invader_1.position.y >= 230) {\r\n                                    //console.warn(invader.position.y)\r\n                                    // console.warn(\"klir\")\r\n                                    clearInterval(myIntervalCircle_1);\r\n                                }\r\n                            }, 5 * (1 - 0.1 * Math.floor(multiplier_1)));\r\n                        }\r\n                        // if (invader.position.y<= defaultPositionY && invader.position.y >= 230){\r\n                        var myInterval_1 = setInterval(function () {\r\n                            //console.log(invader.position.y)\r\n                            //grid.position.y +=0.1\r\n                            if (invader_1.position.y <= canvas.height - 20 &&\r\n                                invader_1.position.y >= defaultPositionY_1) {\r\n                                var velocity = { x: 0, y: moveY_1 };\r\n                                invader_1.update(velocity, invader_1.modelPosition, true);\r\n                                //console.log(\"dzieje sie\")\r\n                            }\r\n                            if (invader_1.position.y >= canvas.height - 20 &&\r\n                                invader_1.position.y <= canvas.height) {\r\n                                var velocity = { x: 0, y: 1 };\r\n                                invader_1.position.y = 0;\r\n                                invader_1.update(velocity, invader_1.modelPosition, true);\r\n                                //console.log(\"dzieje sie\")\r\n                            }\r\n                            if (invader_1.position.y >= 0 &&\r\n                                invader_1.position.y < defaultPositionY_1) {\r\n                                var velocity = { x: 0, y: 1 };\r\n                                invader_1.update(velocity, invader_1.modelPosition, true);\r\n                                //console.log(\"dzieje sie\")\r\n                            }\r\n                            if (invader_1.position.y === defaultPositionY_1) {\r\n                                var velocity = { x: 0, y: 0 };\r\n                                invader_1.coss = 0;\r\n                                invader_1.update(velocity, invader_1.modelPosition, false);\r\n                                clearInterval(myInterval_1);\r\n                                //console.log(invader.selectedToAttack);\r\n                            }\r\n                            //zestrzelenie statku\r\n                            if (keys.restart.pressed) {\r\n                                invader_1.position.x = 10000;\r\n                                clearInterval(myInterval_1);\r\n                            }\r\n                            // if (\r\n                            //   invader.position.y - invader.height <=\r\n                            //     player.position.y + player.height &&\r\n                            //   invader.position.x + invader.width >= player.position.x &&\r\n                            //   invader.position.x - invader.width <=\r\n                            //     player.position.x + player.width &&\r\n                            //   invader.position.y + invader.height >= player.position.y\r\n                            // ) {\r\n                            if (invader_1.position.x + invader_1.width >= player.position.x &&\r\n                                invader_1.position.x <= player.position.x + player.width &&\r\n                                invader_1.position.y + invader_1.height >= player.position.y &&\r\n                                invader_1.position.y <= player.position.y + player.height) {\r\n                                //player.position.x - 100;\r\n                                invader_1.selectedToAttack = false;\r\n                                invader_1.position = { x: 1000, y: 1000 };\r\n                                setTimeout(function () {\r\n                                    player.position.y = -10000;\r\n                                    clearInterval(myInterval_1);\r\n                                    removedInvaders.push([i, j]);\r\n                                    for (var i_1 = 0; i_1 < arrayInvaders.length; i_1++) {\r\n                                        for (var j_1 = 0; j_1 < arrayInvaders[i_1].length; j_1++) {\r\n                                            // console.log(removedInvaders)\r\n                                            // console.log(removedInvaders[i][1])\r\n                                            defaultArrayInvaders[i_1][j_1] = arrayInvaders[i_1][j_1];\r\n                                        }\r\n                                    }\r\n                                    for (var i_2 = 0; i_2 < removedInvaders.length; i_2++) {\r\n                                        // console.log(removedInvaders)\r\n                                        //console.log(removedInvaders[i][1]);\r\n                                        defaultArrayInvaders[removedInvaders[i_2][0]][removedInvaders[i_2][1]] = 0;\r\n                                        //console.log(defaultArrayInvaders);\r\n                                    }\r\n                                    createParticles(invader_1);\r\n                                    grids[0].invaders.splice(index_1, 1);\r\n                                    //console.log(grids[0].invaders);\r\n                                    player.opacity = 0;\r\n                                    if (player.playGame) {\r\n                                        new Audio(\"./../src/mp3/kill_player.mp3\").play();\r\n                                    }\r\n                                    projectiles.splice(-1);\r\n                                    player.lifeNow = false;\r\n                                    player.lifeNow2 = false;\r\n                                    player.backgroundStart = false;\r\n                                    var findReady = setInterval(function () {\r\n                                        //console.log(fly)\r\n                                        if (fly !== undefined) {\r\n                                            //flyInvader()\r\n                                            //console.log(\"przerwa\");\r\n                                        }\r\n                                        if (fly === undefined) {\r\n                                            clearInterval(findReady);\r\n                                            nextLife();\r\n                                            if (grids[0].invaders.length <= 13) {\r\n                                                console.warn(\"wchodzi drugi\");\r\n                                                grids = [];\r\n                                                setTimeout(function () {\r\n                                                    grids = [];\r\n                                                    removedInvaders = [];\r\n                                                    for (var i_3 = 0; i_3 < arrayInvaders.length; i_3++) {\r\n                                                        for (var j_2 = 0; j_2 < arrayInvaders[i_3].length; j_2++) {\r\n                                                            // console.log(removedInvaders)\r\n                                                            // console.log(removedInvaders[i][1])\r\n                                                            defaultArrayInvaders[i_3][j_2] = arrayInvaders[i_3][j_2];\r\n                                                        }\r\n                                                    }\r\n                                                    //console.log(arrayInvaders);\r\n                                                    grids = [new Grid()];\r\n                                                    results.draw(-1, -1, 1, \"game\");\r\n                                                    //player.position.x = canvas.width / 2 - player.width / 2;\r\n                                                    if (results.mode === \"TWO PLAYER\") {\r\n                                                        switch (player.player) {\r\n                                                            case 1:\r\n                                                                //console.log(\"jest dwóch\");\r\n                                                                player.backgroundStart = false;\r\n                                                                player.lifeNow = true;\r\n                                                                //gridsP1 = [new Grid()];\r\n                                                                break;\r\n                                                            case 2:\r\n                                                                player.backgroundStart = false;\r\n                                                                player.lifeNow2 = true;\r\n                                                                //gridsP2 = [new Grid()];\r\n                                                                break;\r\n                                                        }\r\n                                                    }\r\n                                                    if (results.mode === \"ONE PLAYER\") {\r\n                                                        player.backgroundStart = false;\r\n                                                        player.lifeNow = true;\r\n                                                        player.lifeNow2 = false;\r\n                                                    }\r\n                                                    cancelAnimationFrame(myReq);\r\n                                                    animate();\r\n                                                }, 0);\r\n                                                //console.log(\"eejeje\");\r\n                                            }\r\n                                            setTimeout(function () {\r\n                                                flyInvader();\r\n                                            }, 2000);\r\n                                        }\r\n                                    }, 1);\r\n                                }, 0);\r\n                                createParticles(player);\r\n                                //console.log(\"coraz bliżej zestrzelenia\");\r\n                            }\r\n                        }, 20 * (1 - 0.1 * Math.floor(multiplier_1)));\r\n                        //}\r\n                        //strzał invadera\r\n                        //kiedy\r\n                        var whenShot_1 = Math.floor(Math.random() * (500 - 250) + 250);\r\n                        //console.log(whenShot)\r\n                        //const shotInterval = setInterval(() => {\r\n                        var shotCounter_1 = 2;\r\n                        //while (shotCounter >0){\r\n                        var shotInterval_1 = setInterval(function () {\r\n                            //console.log(whenShot)\r\n                            // console.log(invader);\r\n                            if (keys.restart.pressed) {\r\n                                clearInterval(shotInterval_1);\r\n                            }\r\n                            if (invader_1.position.y > whenShot_1) {\r\n                                //console.log(\"wchodzi do intervala\")\r\n                                clearInterval(shotInterval_1);\r\n                                if (invader_1.position.x < player.position.x + 300 &&\r\n                                    invader_1.position.x > player.position.x - 300 &&\r\n                                    invader_1.position.x - invader_1.width / 2 >= 0 &&\r\n                                    invader_1.position.x + invader_1.width / 2 <= canvas.width &&\r\n                                    invader_1.position.y >= 250) {\r\n                                    //\r\n                                    if (player.playGame) {\r\n                                        new Audio(\"./../src/mp3/shot_invader.mp3\").play();\r\n                                    }\r\n                                    invaderProjectiles.push(new InvaderProjectile({\r\n                                        x: invader_1.position.x + invader_1.width / 2 + 4.5,\r\n                                        y: invader_1.position.y - 2,\r\n                                    }, { x: 0, y: 2 }));\r\n                                    var whenShot2 = Math.floor(Math.random() * (400 - 100) + 100);\r\n                                    setTimeout(function () {\r\n                                        if (player.playGame) {\r\n                                            new Audio(\"./../src/mp3/shot_invader.mp3\").play();\r\n                                        }\r\n                                        invaderProjectiles.push(new InvaderProjectile({\r\n                                            x: invader_1.position.x + invader_1.width / 2 + 4.5,\r\n                                            y: invader_1.position.y - 2,\r\n                                        }, { x: 0, y: 2 }));\r\n                                    }, whenShot2);\r\n                                    var shot3 = Math.floor(Math.random() * 2);\r\n                                    if (shot3 === 0) {\r\n                                        var whenShot3 = Math.floor(Math.random() * (400 - 100) + 100);\r\n                                        setTimeout(function () {\r\n                                            if (player.playGame) {\r\n                                                new Audio(\"./../src/mp3/shot_invader.mp3\").play();\r\n                                            }\r\n                                            invaderProjectiles.push(new InvaderProjectile({\r\n                                                x: invader_1.position.x + invader_1.width / 2 + 4.5,\r\n                                                y: invader_1.position.y - 2,\r\n                                            }, { x: 0, y: 2 }));\r\n                                        }, whenShot3);\r\n                                    }\r\n                                    shotCounter_1--;\r\n                                    // clearInterval(shotInterval)\r\n                                }\r\n                            }\r\n                        }, 1);\r\n                        //}, 50);\r\n                        // }\r\n                    }\r\n                }\r\n                catch (_a) {\r\n                    // flyInvader()\r\n                }\r\n                //  }\r\n                // console.log(grids[0].invaders[3].idText);\r\n                flyInvader();\r\n            }, timer);\r\n        }\r\n    }\r\n}\r\nflyInvader();\r\n//tło kwadraty\r\nfor (var i = 0; i < 100; i++) {\r\n    var x = Math.random() * canvas.width;\r\n    backgroundStars.push(new BackgroundStars({\r\n        x: x,\r\n        y: Math.random() * canvas.height,\r\n    }, { x: 0, y: 1 }, 2, colorTab[Math.round(x / 4)], false));\r\n    //console.log(backgroundStars);\r\n}\r\n\n\n//# sourceURL=webpack://galaxian/./src/ts/Game.ts?");

/***/ }),

/***/ "./src/ts/main.ts":
/*!************************!*\
  !*** ./src/ts/main.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./src/ts/Game.ts\");\n//npm run dev\r\nconsole.log(\"test\");\r\n\r\nnew _Game__WEBPACK_IMPORTED_MODULE_0__.Player();\r\n\n\n//# sourceURL=webpack://galaxian/./src/ts/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/main.ts");
/******/ 	
/******/ })()
;